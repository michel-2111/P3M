generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  namaLengkap     String
  nidnNim         String           @unique
  peran           Json
  password        String

  jurusan           String?
  program_studi     String?
  nomor_rekening    String?
  jabatan_fungsional String?
  sinta_score       Int?    // Skor biasanya berupa angka (Integer)
  sinta_id          String?

  notifications   Notification[]
  proposalsKetua  Proposal[]       @relation("KetuaProposal")
  proposalAnggota ProposalMember[]
  reviews         Review[]
}

model Program {
  id            String     @id @unique
  namaProgram   String
  kategori      String
  deskripsi     String
  detailLainnya Json
  proposals     Proposal[]
}

model Proposal {
  id                   Int              @id @default(autoincrement())
  judul                String
  abstrak              String
  status               String
  detailProposal       Json
  dokumenDiunggah      Json?
  programId            String
  userIdKetua          String
  finalReportStatus    String?
  progressReportStatus String?
  createdAt            DateTime         @default(now()) @map("created_at")
  date_uploaded        DateTime?        @map("date_uploaded")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  decisionDate         DateTime?        @map("decision_date")
  logbookEntries       LogbookEntry[]
  program              Program          @relation(fields: [programId], references: [id])
  ketua                User             @relation("KetuaProposal", fields: [userIdKetua], references: [id])
  anggotaTim           ProposalMember[]
  reviews              Review[]
}

model Penelitian {
  id            Int      @id @default(autoincrement())
  judul         String?
  skema         String?  @db.VarChar(100)
  nipKetua      String?  @map("nip_ketua") @db.VarChar(50)
  jumlahMember  Int?     @map("jumlah_member")
  jurusan       String?  @db.VarChar(50)
  status        String?  @db.VarChar(50)
  tanggalDibuat DateTime? @map("tanggal_dibuat") @db.Date

  @@map("penelitian")
}

model Pengabdian {
  id            Int      @id @default(autoincrement())
  judul         String?
  skema         String?  @db.VarChar(100)
  nipKetua      String?  @map("nip_ketua") @db.VarChar(50)
  jumlahMember  Int?     @map("jumlah_member")
  jurusan       String?  @db.VarChar(50)
  status        String?  @db.VarChar(50)
  tanggalDibuat DateTime? @map("tanggal_dibuat") @db.Date

  @@map("pengabdian")
}

model ProposalMember {
  id                Int      @id @default(autoincrement())
  statusPersetujuan String
  proposalId        Int
  userId            String
  proposal          Proposal @relation(fields: [proposalId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([proposalId, userId])
}

model Review {
  id          Int      @id @default(autoincrement())
  skor        Json?
  catatan     String?
  rekomendasi String?
  proposalId  Int
  reviewerId  String
  type        String
  totalSkor   Float?
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
}

model LogbookEntry {
  id         Int      @id @default(autoincrement())
  tanggal    DateTime
  kegiatan   String
  proposalId Int
  bukti      Json?
  proposal   Proposal @relation(fields: [proposalId], references: [id])
}

model Notification {
  id          Int     @id @default(autoincrement())
  pesan       String
  link        String
  sudahDibaca Boolean @default(false)
  userId      String
  user        User    @relation(fields: [userId], references: [id])
}

model Setting {
  settingKey   String @id @unique
  settingValue Json
}